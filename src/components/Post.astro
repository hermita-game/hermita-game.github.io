<div class="wrap">
  <div class="post-display" data-lenis-prevent></div>
</div>

<script>
  let display = document.querySelector(".post-display") as HTMLElement;
  let wrap = display.parentElement as HTMLElement;

  function showPost(post: Element) {
    console.log(post);
    // grabbing the title
    (() => {
      const title = post.querySelector("h2") as HTMLElement;
      // getting the needed translation
      const { x, y, width, height } = title.getBoundingClientRect();
      const padding = -16;
      const { x: x2, y: y2 } = display.getBoundingClientRect();
      const delta = { x: x2 - x + padding, y: y2 - y + padding / 2 };

      // cloning the title
      const clone = title.cloneNode(true) as HTMLElement;
      clone.className = title.className;
      clone.id = "title-clone";
      clone.style.position = "fixed";
      clone.style.top = `${y}px`;
      clone.style.left = `${x}px`;
      clone.style.width = `${width}px`;
      clone.style.height = `${height}px`;
      clone.style.transition = "transform 0.5s ease";
      clone.style.zIndex = "4";
      document.body.appendChild(clone);
      setTimeout(() => {
        clone.style.transform = `translate(${delta.x}px, ${delta.y}px)`;
      }, 0);
    })();

    // making the post appear
    (() => {
      const line = post.nextElementSibling as HTMLElement;
      const { left, top } = line.getBoundingClientRect();
      const { x, y, width, height } = display.getBoundingClientRect();
      const delta = { x: left - x - width / 2, y: top - y - height / 2 };

      display.style.transform = `translate(${delta.x}px, ${delta.y}px) scale(0)`;
    })();

    // showing the post
    display.innerHTML = (post.previousElementSibling as HTMLElement).innerHTML;

    setTimeout(() => {
      wrap.classList.add("show");
      const listener = ({ target }: MouseEvent) => {
        if (display.contains(target as HTMLElement)) return;

        hidePost();
        document.removeEventListener("click", listener);
      };
      document.addEventListener("click", listener);
    }, 10);
  }

  function hidePost() {
    const wrap = display.parentElement as HTMLElement;
    const clone = document.getElementById("title-clone") as HTMLElement;
    clone.remove();
    wrap.classList.remove("show");

    display.style.transform = "";
  }

  const addEventListeners = () => {
    const posts = document.querySelectorAll(".post");
    posts.forEach((post) => {
      post.addEventListener("click", () => showPost(post));
    });
  };
  addEventListeners();
  window.addEventListener("mount", () => {
    console
    if (window.location.pathname !== "/blog/") return;
    addEventListeners();
    display = document.querySelector(".post-display") as HTMLElement;
    wrap = display.parentElement as HTMLElement;
  });
</script>

<style lang="scss">
  $duration: 0.5s;
  $delay: 0.5s;
  .wrap {
    opacity: 0;
    pointer-events: none;
    position: absolute;
    top: 0;
    left: 0;
    padding: 1rem 2rem 2rem 2rem;
    width: 100%;
    height: 100%;
    z-index: 3;
    background-color: rgba(0, 0, 0, 0.5);
    transition: opacity $duration;
	font-family: 'Space Grotesk', sans-serif;
    &:global(.show) {
      opacity: 1;
      pointer-events: all;
      .post-display {
        transform: none !important;
        transition: transform $duration $delay;
      }
    }
  }
  .post-display {
    width: min(100%, 30rem);
    height: 100%;
    background-color: var(--bg);
    padding: 2rem;
    font-size: 1rem;
    overscroll-behavior: contain;
    overflow-y: auto;
  }
  .post-display :global(p) {
    margin: 1rem 0;
  }
</style>
